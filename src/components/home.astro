---
import LetterGlitch from "../React/LetterGlitch.tsx";
import ThreeDShowcase from "../React/ThreeDShowcase.tsx";
import LogoWall from "../components/logoWall.astro";
import SkillsList from "../React/SkillsList.tsx";
---

<section class="text-[var(--white)] mt-12 md:mt-0" id="home">
  <div class="max-w-5xl mx-auto space-y-8 md:py-36 pb-14">
    <div class="text-left space-y-4">
      <p class="text-md md:text-lg text-[var(--white-icon)] shiny-white">
        Hi, I'm Ed Lally.
      </p>
      <div 
        id="title-container" 
        class="flex flex-col lg:flex-row lg:items-center space-y-4 lg:space-y-0 lg:space-x-8 md:gap-4 perspective-[800px] cursor-grab"
      >
        <h1 class="text-[var(--white)] text-5xl md:text-6xl font-medium text-pretty leading-none">
          <span class="md:hidden">Blender</span>
          <span class="hidden md:inline">Blender</span>
          <span
            id="text-3d"
            class="inline-block"
            style="
              --rX: 0deg;
              --rY: 0deg;
              --z-offset: 0px;
              transform: perspective(600px) rotateX(var(--rX)) rotateY(var(--rY)) translateZ(var(--z-offset));
              transform-style: preserve-3d;
              transition: all 0.8s cubic-bezier(0.34, 1.56, 0.64, 1);
              text-shadow: none;
              color: var(--white);
              letter-spacing: 0.03em;
              -webkit-text-stroke: 1px rgba(252, 255, 242, 0.5);
              filter: none;
            "
          >
            3D
          </span><br class="md:hidden"/>
          Artist & Developer
        </h1>
        <p class="text-md md:text-2xl text-[var(--white-icon)]">
          Creating powerful visual experiences using technical Blender workflows and Python scripting.
          <span class="text-[var(--sec)] shiny-sec">Epicly.</span>
        </p>
      </div>
      
      <script is:inline>
        document.addEventListener('DOMContentLoaded', () => {
          const container = document.getElementById('title-container');
          const text3d = document.getElementById('text-3d');
          
          // Current values for smooth animation
          let currentRotX = 0;
          let currentRotY = 0;
          let currentZOffset = 0;
          let targetRotX = 0;
          let targetRotY = 0;
          let targetZOffset = 0;

          // For dragging and spinning
          let isDragging = false;
          let isSpinning = false;
          let dragStartX = 0;
          let dragStartY = 0;
          let spinVelocityX = 0;
          let spinVelocityY = 0;
          let lastMouseX = 0;
          let lastMouseY = 0;
          let dampingFactor = 0.95; // Controls how quickly spinning slows down
          
          // Animation settings
          const springStrength = 0.13; // Higher value = faster snap (0-1)
          const returnSpringStrength = 0.06; // Return speed
          
          // Spring-like animation loop
          let animationFrameId = null;
          
          function updateAnimation() {
            if (isSpinning) {
              // Apply spinning with damping
              spinVelocityX *= dampingFactor;
              spinVelocityY *= dampingFactor;
              
              // Stop spinning when velocity becomes very small
              if (Math.abs(spinVelocityX) < 0.01 && Math.abs(spinVelocityY) < 0.01) {
                isSpinning = false;
              } else {
                targetRotX += spinVelocityY;
                targetRotY += spinVelocityX;
              }
            }
            
            // Calculate spring force
            let diffX = targetRotX - currentRotX;
            let diffY = targetRotY - currentRotY;
            let diffZ = targetZOffset - currentZOffset;
            
            // Apply spring physics (smooth follow)
            const strength = container.matches(':hover') || isDragging ? springStrength : returnSpringStrength;
            currentRotX += diffX * strength;
            currentRotY += diffY * strength;
            currentZOffset += diffZ * strength;
            
            // Update element transform
            text3d.style.setProperty('--rX', `${currentRotX.toFixed(2)}deg`);
            text3d.style.setProperty('--rY', `${currentRotY.toFixed(2)}deg`);
            text3d.style.setProperty('--z-offset', `${currentZOffset.toFixed(2)}px`);
            
            // Only apply glow when not in base position
            const isAtBasePosition = Math.abs(currentRotX) < 0.1 && Math.abs(currentRotY) < 0.1;
            
            if (isAtBasePosition) {
              text3d.style.textShadow = 'none';
              text3d.style.filter = 'none';
            } else {
              // Update shadow based on rotation (with constraints)
              // Limit shadow offset to a maximum of 5px to keep glow close to text
              const maxShadowOffset = 5;
              const shadowX = Math.max(-maxShadowOffset, Math.min(maxShadowOffset, currentRotY / 3));
              const shadowY = Math.max(-maxShadowOffset, Math.min(maxShadowOffset, -currentRotX / 3));
              const shadowBlur = 4 + Math.min(6, currentZOffset / 3);
              const shadowOpacity = 0.15 + Math.min(0.3, (currentZOffset / 20) * 0.3);
              
              text3d.style.textShadow = `
                ${-shadowX}px ${-shadowY}px ${shadowBlur}px rgba(204, 255, 0, ${shadowOpacity}),
                ${-shadowX * 1.5}px ${-shadowY * 1.5}px ${shadowBlur * 1.5}px rgba(204, 255, 0, ${shadowOpacity / 3}),
                0 0 1px rgba(252, 255, 242, 0.3)
              `;
              text3d.style.filter = 'drop-shadow(0 0 0.5px rgba(204, 255, 0, 0.7))';
            }
            
            // Continue animation
            animationFrameId = requestAnimationFrame(updateAnimation);
          }
          
          // Start animation loop
          animationFrameId = requestAnimationFrame(updateAnimation);
        
          function onMouseMove(e) {
            if (!isDragging) {
              const { left, top, width, height } = container.getBoundingClientRect();
              // calculate cursor offset from center
              const x = e.clientX - (left + width / 2);
              const y = e.clientY - (top + height / 2);
              
              // map to a max rotation of ±30°
              targetRotY = (x / (width / 2)) * 30;
              targetRotX = -(y / (height / 2)) * 30;
              
              // calculate z-offset based on cursor distance from center
              const distance = Math.sqrt(x*x + y*y);
              const maxDistance = Math.sqrt((width/2)*(width/2) + (height/2)*(height/2));
              targetZOffset = (distance / maxDistance) * 20; // max 20px offset
            }
          }
        
          function onMouseLeave() {
            // Only reset if not dragging
            if (!isDragging && !isSpinning) {
              // reset targets when the cursor leaves
              targetRotX = 0;
              targetRotY = 0;
              targetZOffset = 0;
            }
          }

          // Dragging functions
          function onDragStart(e) {
            // Now we can drag from anywhere within the container
            e.preventDefault();
            isDragging = true;
            isSpinning = false;
            
            // Record starting positions
            dragStartX = e.clientX;
            dragStartY = e.clientY;
            lastMouseX = e.clientX;
            lastMouseY = e.clientY;
            
            // Style cursor
            container.style.cursor = 'grabbing';
            
            // Add document-level event listeners
            document.addEventListener('mousemove', onDrag);
            document.addEventListener('mouseup', onDragEnd);
          }
          
          function onDrag(e) {
            if (isDragging) {
              // Calculate movement since drag start
              const deltaX = e.clientX - dragStartX;
              const deltaY = e.clientY - dragStartY;
              
              // Calculate rotation (scale as needed)
              targetRotY = deltaX * 0.5;
              targetRotX = -deltaY * 0.5;
              
              // Calculate velocities for spinning effect
              spinVelocityX = (e.clientX - lastMouseX) * 0.2;
              spinVelocityY = (e.clientY - lastMouseY) * 0.2;
              
              // Update last position
              lastMouseX = e.clientX;
              lastMouseY = e.clientY;
            }
          }
          
          function onDragEnd() {
            if (isDragging) {
              isDragging = false;
              isSpinning = true;
              container.style.cursor = 'grab';
              
              // Remove document-level listeners
              document.removeEventListener('mousemove', onDrag);
              document.removeEventListener('mouseup', onDragEnd);
            }
          }
          
          // Add mouse hover events to container
          container.addEventListener('mousemove', onMouseMove);
          container.addEventListener('mouseleave', onMouseLeave);
          
          // Add dragging events to container (instead of just the 3D text)
          container.addEventListener('mousedown', onDragStart);
          
          // Clean up on page unload
          window.addEventListener('beforeunload', () => {
            if (animationFrameId) {
              cancelAnimationFrame(animationFrameId);
            }
            document.removeEventListener('mousemove', onDrag);
            document.removeEventListener('mouseup', onDragEnd);
          });
        });
      </script>
      
      <div class="flex justify-start gap-2 pt-3 md:pt-6">
        <a
          target="_blank"
          href="https://github.com/gothsec"
          aria-label="GitHub"
          class="text-[var(--white-icon)] hover:text-[#FCFFF2] transition duration-300 ease-in-out border border-1 border-[var(--white-icon-tr)] p-3 rounded-xl bg-[#1414149c] hover:bg-[var(--white-icon-tr)]"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="currentColor"
            class="size-8"
          >
            <path
              d="M12.001 2C6.47598 2 2.00098 6.475 2.00098 12C2.00098 16.425 4.86348 20.1625 8.83848 21.4875C9.33848 21.575 9.52598 21.275 9.52598 21.0125C9.52598 20.775 9.51348 19.9875 9.51348 19.15C7.00098 19.6125 6.35098 18.5375 6.15098 17.975C6.03848 17.6875 5.55098 16.8 5.12598 16.5625C4.77598 16.375 4.27598 15.9125 5.11348 15.9C5.90098 15.8875 6.46348 16.625 6.65098 16.925C7.55098 18.4375 8.98848 18.0125 9.56348 17.75C9.65098 17.1 9.91348 16.6625 10.201 16.4125C7.97598 16.1625 5.65098 15.3 5.65098 11.475C5.65098 10.3875 6.03848 9.4875 6.67598 8.7875C6.57598 8.5375 6.22598 7.5125 6.77598 6.1375C6.77598 6.1375 7.61348 5.875 9.52598 7.1625C10.326 6.9375 11.176 6.825 12.026 6.825C12.876 6.825 13.726 6.9375 14.526 7.1625C16.4385 5.8625 17.276 6.1375 17.276 6.1375C17.826 7.5125 17.476 8.5375 17.376 8.7875C18.0135 9.4875 18.401 10.375 18.401 11.475C18.401 15.3125 16.0635 16.1625 13.8385 16.4125C14.201 16.725 14.5135 17.325 14.5135 18.2625C14.5135 19.6 14.501 20.675 14.501 21.0125C14.501 21.275 14.6885 21.5875 15.1885 21.4875C19.259 20.1133 21.9999 16.2963 22.001 12C22.001 6.475 17.526 2 12.001 2Z"
            ></path>
          </svg>
        </a>
        <a
          target="_blank"
          href="https://linkedin.com/in/hernandezoscar-dev"
          aria-label="LinkedIn"
          class="text-[var(--white-icon)] hover:text-[#FCFFF2] transition duration-300 ease-in-out border border-1 border-[var(--white-icon-tr)] p-3 rounded-xl bg-[#1414149c] hover:bg-[var(--white-icon-tr)]"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="currentColor"
            class="size-8"
          >
            <path
              d="M18.3362 18.339H15.6707V14.1622C15.6707 13.1662 15.6505 11.8845 14.2817 11.8845C12.892 11.8845 12.6797 12.9683 12.6797 14.0887V18.339H10.0142V9.75H12.5747V10.9207H12.6092C12.967 10.2457 13.837 9.53325 15.1367 9.53325C17.8375 9.53325 18.337 11.3108 18.337 13.6245V18.339H18.3362ZM7.00373 8.57475C6.14573 8.57475 5.45648 7.88025 5.45648 7.026C5.45648 6.1725 6.14648 5.47875 7.00373 5.47875C7.85873 5.47875 8.55173 6.1725 8.55173 7.026C8.55173 7.88025 7.85798 8.57475 7.00373 8.57475ZM8.34023 18.339H5.66723V9.75H8.34023V18.339ZM19.6697 3H4.32923C3.59498 3 3.00098 3.5805 3.00098 4.29675V19.7033C3.00098 20.4202 3.59498 21 4.32923 21H19.6675C20.401 21 21.001 20.4202 21.001 19.7033V4.29675C21.001 3.5805 20.401 3 19.6675 3H19.6697Z"
            ></path>
          </svg>
        </a>
        <a
          target="_blank"
          href="https://mail.google.com/mail/?view=cm&fs=1&to=oscarandreshernandezpineda@gmail.com&su=Hey%20Oscar!"
          aria-label="Email"
          class="text-[var(--white-icon)] hover:text-[#FCFFF2] transition duration-300 ease-in-out border border-1 border-[var(--white-icon-tr)] p-3 rounded-xl bg-[#1414149c] hover:bg-[var(--white-icon-tr)]"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="2.1em"
            height="2.1em"
            viewBox="0 0 24 24"
          >
            <path
              fill="currentColor"
              d="m18.73 5.41l-1.28 1L12 10.46L6.55 6.37l-1.28-1A2 2 0 0 0 2 7.05v11.59A1.36 1.36 0 0 0 3.36 20h3.19v-7.72L12 16.37l5.45-4.09V20h3.19A1.36 1.36 0 0 0 22 18.64V7.05a2 2 0 0 0-3.27-1.64"
            ></path>
          </svg>
        </a>
      </div>
    </div>

    <LogoWall />

    <div class="flex flex-col lg:flex-row items-center gap-8">
      <SkillsList client:load />
      <div
        class="flex justify-center md:w-full md:h-[292px] size-[290px] pt-3 md:pt-9 md:ml-16"
      >
        <ThreeDShowcase
          client:load
        />
      </div>
    </div>
  </div>
</section>

<style is:global>
  .shiny-sec {
    background: linear-gradient(135deg, #CCFF00 25%, #EEFFCC 50%, #CCFF00 75%);
    background-size: 400% 100%;
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
    animation: shine 3s linear infinite;
  }

  @keyframes shine {
    0% {
      background-position: 100% 50%;
    }
    30%,
    70% {
      background-position: 0% 50%;
    }
  }
  
  /* 3D text styles */
  #text-3d {
    position: relative;
    display: inline-block;
    font-weight: bold;
    user-select: none; /* Prevent text selection while dragging */
    touch-action: none; /* Prevent scrolling on touch devices */
  }
  
  #text-3d::before {
    content: "3D";
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    color: rgba(204, 255, 0, 0);
    transform: translateZ(-3px);
    filter: blur(1.5px);
  }
</style>
