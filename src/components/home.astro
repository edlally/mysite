---
import LogoWall from "../components/logoWall.astro";
import SkillsList from "../React/SkillsList.tsx";
---

<section class="text-[var(--white)] mt-12 md:mt-0 relative z-10" id="home">
  <div class="max-w-5xl mx-auto space-y-8 md:py-36 pb-14">
    <div class="text-left space-y-4">
      <p class="text-md md:text-lg text-[var(--white-icon)] shiny-white">
        Hi, I'm <span class="shiny-sec">Ed</span> 
      </p>
      <div 
        id="title-container" 
        class="flex flex-col lg:flex-row lg:items-center space-y-4 lg:space-y-0 lg:space-x-8 md:gap-4 perspective-[800px]"
      >
        <h1 class="text-[var(--white)] text-5xl md:text-6xl font-medium text-pretty leading-none">
          <span class="md:hidden">Blender</span>
          <span class="hidden md:inline">Blender</span>
          <span
            id="text-3d"
            class="inline-block"
            style="
              transform: perspective(600px) rotateX(0deg) rotateY(0deg) translateZ(0px);
              transform-style: preserve-3d;
              transition: all 0.8s cubic-bezier(0.34, 1.56, 0.64, 1);
              text-shadow: none;
              color: var(--white);
              letter-spacing: 0.03em;
              -webkit-text-stroke: 1px rgba(252, 255, 242, 0.5);
              filter: none;
            "
          >
            3D
          </span><br class="md:hidden"/>
          Artist & Developer
        </h1>
        <p class="text-md md:text-2xl text-[var(--white-icon)]">
          Creating powerful visual experiences using technical Blender workflows and Python scripting.
          <span class="text-[var(--sec)] shiny-sec">Epicly.</span>
        </p>
      </div>
      
      <script is:inline>
        document.addEventListener('DOMContentLoaded', () => {
          if (window.__home3d_initialized) return;
          window.__home3d_initialized = true;

          // Elements
          const container = document.getElementById('title-container');
          const text3d = document.getElementById('text-3d');
          
          if (!container || !text3d) return;

          // State variables
          let currentRotX = 0;
          let currentRotY = 0;
          let currentZOffset = 0;
          let targetRotX = 0;
          let targetRotY = 0;
          let targetZOffset = 0;

          let animationFrameId = null;
          let isTabVisible = true;
          let isHovered = false;
          let isSectionVisible = true; // Track if section is in viewport

          // Constants
          const SPRING_STRENGTH = 0.08;
          const RETURN_SPRING_STRENGTH = 0.03;
          const MOVE_THROTTLE = 1000 / 60; // 60fps

          // Add intersection observer to detect when section is in viewport
          const homeSection = document.getElementById('home');
          if (homeSection && 'IntersectionObserver' in window) {
            const observer = new IntersectionObserver((entries) => {
              entries.forEach(entry => {
                isSectionVisible = entry.isIntersecting;
                
                // If section becomes visible, restart animation if needed
                if (isSectionVisible && shouldAnimate() && !animationFrameId) {
                  startAnimation();
                }
                
                // If section is no longer visible, cancel any running animations to save CPU
                if (!isSectionVisible && animationFrameId) {
                  cancelAnimationFrame(animationFrameId);
                  animationFrameId = null;
                }
              });
            }, {
              rootMargin: '0px',
              threshold: 0.1 // Trigger when at least 10% of the section is visible
            });
            
            observer.observe(homeSection);
          }

          // Helper Functions
          function startAnimation() {
            if (!animationFrameId && isTabVisible && isSectionVisible) {
                animationFrameId = requestAnimationFrame(updateAnimation);
            }
          }

          function shouldAnimate() {
            // Use stricter thresholds to determine if animation is truly needed
            const isAtRestThreshold = 0.05; // Smaller threshold for determining "at rest"
            const isAtBasePosition = Math.abs(currentRotX) < isAtRestThreshold && 
                                    Math.abs(currentRotY) < isAtRestThreshold && 
                                    Math.abs(currentZOffset) < isAtRestThreshold;
                                    
            // Check if we're actually moving significantly
            const isMoving = Math.abs(targetRotX - currentRotX) > isAtRestThreshold || 
                           Math.abs(targetRotY - currentRotY) > isAtRestThreshold ||
                           Math.abs(targetZOffset - currentZOffset) > isAtRestThreshold;
                           
            // Only animate when really necessary
            return (isHovered || (!isAtBasePosition && isMoving)) && isSectionVisible;
          }

          function updateAnimation() {
            if (!isTabVisible || !isSectionVisible) {
              animationFrameId = null;
              return;
            }
            
            // Calculate spring physics
            const diffX = targetRotX - currentRotX;
            const diffY = targetRotY - currentRotY;
            const diffZ = targetZOffset - currentZOffset;
            
            // Apply spring strength based on state
            const strengthX = isHovered ? SPRING_STRENGTH : RETURN_SPRING_STRENGTH;
            const strengthY = isHovered ? SPRING_STRENGTH : RETURN_SPRING_STRENGTH;
            
            // Apply physics
            currentRotX += diffX * strengthX;
            currentRotY += diffY * strengthY;
            currentZOffset += diffZ * RETURN_SPRING_STRENGTH;
            
            // Apply friction to ongoing motion
            if (!isHovered) {
              targetRotX *= 0.97;
              targetRotY *= 0.97;
            }
            
            // Only snap to target when very close
            if (Math.abs(diffX) < 0.01) currentRotX = targetRotX;
            if (Math.abs(diffY) < 0.01) currentRotY = targetRotY;
            if (Math.abs(diffZ) < 0.01) currentZOffset = targetZOffset;

            // Store transforms in local variables to reduce multiple calculations
            const rX = `${currentRotX.toFixed(2)}deg`;
            const rY = `${currentRotY.toFixed(2)}deg`;
            const zOffset = `${currentZOffset.toFixed(2)}px`;

            // Use single DOM update to set transforms
            text3d.style.transform = `perspective(600px) rotateX(${rX}) rotateY(${rY}) translateZ(${zOffset})`;

            // Apply shadows based on rotation only when necessary
            const isAtBasePosition = Math.abs(currentRotX) < 0.1 && Math.abs(currentRotY) < 0.1;
            
            // Only update styles if they actually changed
            if (isAtBasePosition) {
              if (text3d.style.textShadow !== 'none') {
                text3d.style.textShadow = 'none';
                text3d.style.filter = 'none';
              }
            } else {
              // Get accent color and apply dynamic shadow - cache this computation
              if (!window.accentRgbColor) {
                const accentColor = getComputedStyle(document.documentElement).getPropertyValue('--sec').trim();
                window.accentRgbColor = hexToRgb(accentColor);
              }
              const rgbColor = window.accentRgbColor;
              
              const maxShadowOffset = 5;
              const shadowX = Math.max(-maxShadowOffset, Math.min(maxShadowOffset, currentRotY / 3));
              const shadowY = Math.max(-maxShadowOffset, Math.min(maxShadowOffset, -currentRotX / 3));
              const shadowBlur = 4 + Math.min(6, currentZOffset / 3);
              const shadowOpacity = 0.15 + Math.min(0.3, (currentZOffset / 20) * 0.3);
              
              const newShadow = `
                ${-shadowX}px ${-shadowY}px ${shadowBlur}px rgba(${rgbColor}, ${shadowOpacity}),
                ${-shadowX * 1.5}px ${-shadowY * 1.5}px ${shadowBlur * 1.5}px rgba(${rgbColor}, ${shadowOpacity / 3}),
                0 0 1px rgba(252, 255, 242, 0.3)
              `;
              
              const newFilter = `drop-shadow(0 0 0.5px rgba(${rgbColor}, 0.7))`;
              
              // Only update DOM when the values actually change
              if (text3d.style.textShadow !== newShadow) {
                text3d.style.textShadow = newShadow;
                text3d.style.filter = newFilter;
              }
            }

            // Continue animation if still needed
            if (shouldAnimate()) {
              if (window.requestIdleCallback) {
                // Cancel existing animation frame to prevent duplicates
                if (animationFrameId) {
                  cancelAnimationFrame(animationFrameId);
                }
                window.requestIdleCallback(() => {
                  animationFrameId = requestAnimationFrame(updateAnimation);
                }, { timeout: 16 }); // Equivalent to 60fps timeout
              } else {
                animationFrameId = requestAnimationFrame(updateAnimation);
              }
            } else {
              // Explicitly cancel animation and clean up
              animationFrameId = null;
              
              // Make sure we're exactly at target values to prevent visual artifacts
              if (!isHovered) {
                currentRotX = targetRotX = 0;
                currentRotY = targetRotY = 0;
                currentZOffset = targetZOffset = 0;
                
                // Force final render state - single DOM update
                text3d.style.transform = 'perspective(600px) rotateX(0deg) rotateY(0deg) translateZ(0px)';
                text3d.style.textShadow = 'none';
                text3d.style.filter = 'none';
              }
            }
          }

          // Convert hex color to RGB format
          function hexToRgb(hex) {
            hex = hex.replace(/^#/, '');
            const bigint = parseInt(hex, 16);
            const r = (bigint >> 16) & 255;
            const g = (bigint >> 8) & 255;
            const b = bigint & 255;
            return `${r}, ${g}, ${b}`;
          }

          // Mouse Event Handlers
          let lastMove = 0;
          
          function onMouseMove(e) {
            const now = performance.now();
            // Increase throttle threshold to reduce the number of calculations
            if (now - lastMove < MOVE_THROTTLE * 1.5) return;
            lastMove = now;
            
            const { left, top, width, height } = container.getBoundingClientRect();
            const x = e.clientX - (left + width / 2);
            const y = e.clientY - (top + height / 2);
            
            targetRotY = (x / (width / 2)) * 30;
            targetRotX = -(y / (height / 2)) * 30;
            
            const distance = Math.sqrt(x*x + y*y);
            const maxDistance = Math.sqrt((width/2)*(width/2) + (height/2)*(height/2));
            targetZOffset = (distance / maxDistance) * 20;
            
            startAnimation();
          }

          function onMouseEnter() {
            isHovered = true;
            startAnimation();
          }

          function onMouseLeave() {
            isHovered = false;
            targetRotX = 0;
            targetRotY = 0;
            targetZOffset = 0;
            startAnimation();
          }

          // Set up visibility change handler
          function handleVisibilityChange() {
            isTabVisible = !document.hidden;
            
            if (!isTabVisible) {
              document.removeEventListener('mousemove', onMouseMove);
              document.removeEventListener('mouseenter', onMouseEnter);
              document.removeEventListener('mouseleave', onMouseLeave);
              
              if (animationFrameId) {
                cancelAnimationFrame(animationFrameId);
                animationFrameId = null;
              }
            } else {
              // Re-add event listeners
              container.addEventListener('mousemove', onMouseMove, { passive: true });
              container.addEventListener('mouseenter', onMouseEnter, { passive: true });
              container.addEventListener('mouseleave', onMouseLeave, { passive: true });
              
              // Restart animation if needed
              if (shouldAnimate() && !animationFrameId) {
                startAnimation();
              }
            }
          }

          // Add event listeners
          container.addEventListener('mousemove', onMouseMove, { passive: true });
          container.addEventListener('mouseenter', onMouseEnter, { passive: true });
          container.addEventListener('mouseleave', onMouseLeave, { passive: true });
          document.addEventListener('visibilitychange', handleVisibilityChange);

          // Cleanup function
          const cleanup = () => {
            if (animationFrameId) {
              cancelAnimationFrame(animationFrameId);
            }
            
            document.removeEventListener('visibilitychange', handleVisibilityChange);
            container.removeEventListener('mousemove', onMouseMove);
            container.removeEventListener('mouseenter', onMouseEnter);
            container.removeEventListener('mouseleave', onMouseLeave);
            
            window.__home3d_initialized = false;
          };

          window.addEventListener('beforeunload', cleanup);
        });
      </script>
      
      <div class="flex justify-start gap-2 pt-3 md:pt-6">
        <a
          target="_blank"
          href="https://github.com/edlally"
          aria-label="GitHub"
          class="text-[var(--white-icon)] hover:text-[#FCFFF2] transition duration-300 ease-in-out border border-1 border-[var(--white-icon-tr)] p-3 rounded-xl bg-[#1414149c] hover:bg-[var(--white-icon-tr)]"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="currentColor"
            class="size-8"
          >
            <path
              d="M12.001 2C6.47598 2 2.00098 6.475 2.00098 12C2.00098 16.425 4.86348 20.1625 8.83848 21.4875C9.33848 21.575 9.52598 21.275 9.52598 21.0125C9.52598 20.775 9.51348 19.9875 9.51348 19.15C7.00098 19.6125 6.35098 18.5375 6.15098 17.975C6.03848 17.6875 5.55098 16.8 5.12598 16.5625C4.77598 16.375 4.27598 15.9125 5.11348 15.9C5.90098 15.8875 6.46348 16.625 6.65098 16.925C7.55098 18.4375 8.98848 18.0125 9.56348 17.75C9.65098 17.1 9.91348 16.6625 10.201 16.4125C7.97598 16.1625 5.65098 15.3 5.65098 11.475C5.65098 10.3875 6.03848 9.4875 6.67598 8.7875C6.57598 8.5375 6.22598 7.5125 6.77598 6.1375C6.77598 6.1375 7.61348 5.875 9.52598 7.1625C10.326 6.9375 11.176 6.825 12.026 6.825C12.876 6.825 13.726 6.9375 14.526 7.1625C16.4385 5.8625 17.276 6.1375 17.276 6.1375C17.826 7.5125 17.476 8.5375 17.376 8.7875C18.0135 9.4875 18.401 10.375 18.401 11.475C18.401 15.3125 16.0635 16.1625 13.8385 16.4125C14.201 16.725 14.5135 17.325 14.5135 18.2625C14.5135 19.6 14.501 20.675 14.501 21.0125C14.501 21.275 14.6885 21.5875 15.1885 21.4875C19.259 20.1133 21.9999 16.2963 22.001 12C22.001 6.475 17.526 2 12.001 2Z"
            ></path>
          </svg>
        </a>
        <a
          target="_blank"
          href="https://www.linkedin.com/in/eddie-lally/"
          aria-label="LinkedIn"
          class="text-[var(--white-icon)] hover:text-[#FCFFF2] transition duration-300 ease-in-out border border-1 border-[var(--white-icon-tr)] p-3 rounded-xl bg-[#1414149c] hover:bg-[var(--white-icon-tr)]"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="currentColor"
            class="size-8"
          >
            <path
              d="M18.3362 18.339H15.6707V14.1622C15.6707 13.1662 15.6505 11.8845 14.2817 11.8845C12.892 11.8845 12.6797 12.9683 12.6797 14.0887V18.339H10.0142V9.75H12.5747V10.9207H12.6092C12.967 10.2457 13.837 9.53325 15.1367 9.53325C17.8375 9.53325 18.337 11.3108 18.337 13.6245V18.339H18.3362ZM7.00373 8.57475C6.14573 8.57475 5.45648 7.88025 5.45648 7.026C5.45648 6.1725 6.14648 5.47875 7.00373 5.47875C7.85873 5.47875 8.55173 6.1725 8.55173 7.026C8.55173 7.88025 7.85798 8.57475 7.00373 8.57475ZM8.34023 18.339H5.66723V9.75H8.34023V18.339ZM19.6697 3H4.32923C3.59498 3 3.00098 3.5805 3.00098 4.29675V19.7033C3.00098 20.4202 3.59498 21 4.32923 21H19.6675C20.401 21 21.001 20.4202 21.001 19.7033V4.29675C21.001 3.5805 20.401 3 19.6675 3H19.6697Z"
            ></path>
          </svg>
        </a>
        <a
          target="_blank"
          href="mailto:eddielally@outlook.com"
          aria-label="Email"
          class="text-[var(--white-icon)] hover:text-[#FCFFF2] transition duration-300 ease-in-out border border-1 border-[var(--white-icon-tr)] p-3 rounded-xl bg-[#1414149c] hover:bg-[var(--white-icon-tr)]"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="2.1em"
            height="2.1em"
            viewBox="0 0 24 24"
          >
            <path
              fill="currentColor"
              d="m18.73 5.41l-1.28 1L12 10.46L6.55 6.37l-1.28-1A2 2 0 0 0 2 7.05v11.59A1.36 1.36 0 0 0 3.36 20h3.19v-7.72L12 16.37l5.45-4.09V20h3.19A1.36 1.36 0 0 0 22 18.64V7.05a2 2 0 0 0-3.27-1.64"
            ></path>
          </svg>
        </a>
      </div>

      <div class="flex flex-col lg:flex-row items-center gap-8">
        <SkillsList client:visible />
      </div>
    </div>

    <LogoWall />
  </div>
</section>

<style is:global>
  :root {
    --sec-rgb: 204, 255, 0;
  }
  
  .home-blur-bg {
    background: rgba(20,20,20,0.32);
    backdrop-filter: blur(18px);
    -webkit-backdrop-filter: blur(18px);
    border-radius: 1.2rem;
    padding: 2.2rem 2.2rem 2.2rem 2.2rem;
    box-shadow: 0 0 0 0 transparent;
    margin-bottom: 1.5rem;
  }
  
  .shiny-sec {
    background: linear-gradient(135deg, var(--sec) 25%, #EEFFCC 50%, var(--sec) 75%);
    background-size: 400% 100%;
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
    animation: shine 3s linear infinite;
  }

  @keyframes shine {
    0% {
      background-position: 100% 50%;
    }
    30%,
    70% {
      background-position: 0% 50%;
    }
  }

  #text-3d {
    position: relative;
    display: inline-block;
    font-weight: bold;
    user-select: none;
    touch-action: none;
    overflow: visible;
    transform-style: preserve-3d;
  }
  
  #text-3d::before {
    content: "3D";
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    color: rgba(var(--sec-rgb), 0);
    transform: translateZ(-3px);
    filter: blur(1.5px);
  }
</style>
